'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = connectConfigure;

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _InstantSearch = require('../../lib/InstantSearch.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var usage = 'Usage:\nvar customConfigureWidget = connectConfigure(\n  function renderFn(params, isFirstRendering) {\n    // params = {\n    //   refine,\n    //   widgetParams\n    // }\n  },\n  function disposeFn() {}\n)\n';

/**
 * @typedef {Object} CustomConfigureWidgetOptions
 * @property {Object} searchParameters The Configure widget options are search parameters
 */

/**
 * @typedef {Object} ConfigureRenderingOptions
 * @property {function(searchParameters: Object)} refine Sets new `searchParameters` and trigger a search.
 * @property {Object} widgetParams All original `CustomConfigureWidgetOptions` forwarded to the `renderFn`.
 */

/**
 * The **Configure** connector provides the logic to build a custom widget
 * that will give you ability to override or force some search parameters sent to Algolia API.
 *
 * @type {Connector}
 * @param {function(ConfigureRenderingOptions)} renderFn Rendering function for the custom **Configure** Widget.
 * @param {function} unmountFn Unmount function called when the widget is disposed.
 * @return {function(CustomConfigureWidgetOptions)} Re-usable widget factory for a custom **Configure** widget.
 */
function connectConfigure(renderFn, unmountFn) {
  if ((0, _isFunction2.default)(renderFn) && !(0, _isFunction2.default)(unmountFn) || !(0, _isFunction2.default)(renderFn) && (0, _isFunction2.default)(unmountFn)) {
    throw new Error(usage);
  }

  return function () {
    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (!(0, _isPlainObject2.default)(widgetParams.searchParameters)) {
      throw new Error(usage);
    }

    return {
      getConfiguration: function getConfiguration() {
        return widgetParams.searchParameters;
      },
      init: function init(_ref) {
        var helper = _ref.helper;

        this._refine = this.refine(helper);

        if ((0, _isFunction2.default)(renderFn)) {
          renderFn({
            refine: this._refine,
            widgetParams: widgetParams
          }, true);
        }
      },
      refine: function refine(helper) {
        var _this = this;

        return function (searchParameters) {
          // merge new `searchParameters` with the ones set from other widgets
          var actualState = _this.removeSearchParameters(helper.getState());
          var nextSearchParameters = (0, _InstantSearch.enhanceConfiguration)({})(_extends({}, actualState), {
            getConfiguration: function getConfiguration() {
              return searchParameters;
            }
          });

          // trigger a search with the new merged searchParameters
          helper.setState(nextSearchParameters).search();

          // update original `widgetParams.searchParameters` to the new refined one
          widgetParams.searchParameters = searchParameters;
        };
      },
      render: function render() {
        if (renderFn) {
          renderFn({
            refine: this._refine,
            widgetParams: widgetParams
          }, false);
        }
      },
      dispose: function dispose(_ref2) {
        var state = _ref2.state;

        if (unmountFn) unmountFn();
        return this.removeSearchParameters(state);
      },
      removeSearchParameters: function removeSearchParameters(state) {
        // widgetParams are assumed 'controlled',
        // so they override whatever other widgets give the state
        return state.mutateMe(function (mutableState) {
          Object.keys(widgetParams.searchParameters).forEach(function (key) {
            delete mutableState[key];
          });
        });
      }
    };
  };
}