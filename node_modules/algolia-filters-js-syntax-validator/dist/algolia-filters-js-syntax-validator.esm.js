class Token {
    constructor(type, string, raw_string, pos) {
        this.type = type;
        this.value = string;
        this.raw_value = raw_string === null ? this.value : raw_string;
        this.pos = pos;
        this.errorStart = false;
        this.errorStop = false;
        this.unexpectedMessage = '';
        this.afterSeparators = '';
        this.cssClasses = ['token', this.type];
        this.afterSeparatorsCssClasses = ['token-spaces'];

        this.tokensList = {
            Token_Empty_Str: "empty string",
            Token_Incomplete_Str: "incomplete string",
            Token_Error: "!",
            Token_Term: "filter",
            Token_String: "string",
            Token_Num: "numeric",
            Token_Facet_Separator: "':'",
            Token_Range: "'TO'",
            Token_Open_Backet: "'('",
            Token_Close_Bracket: "')'",
            Token_OR: "'OR'",
            Token_AND: "'AND'",
            Token_NOT: "'NOT'",
            Token_EOF: "end of filter",
            Token_Open_Angled_Bracket: "<",
            Token_Close_Angled_Bracket: ">",
            Token_Coma: ",",
            Token_Operator: "numeric operator",
            Term_Tag: 'tag filter',
            Term_Numeric: 'numeric filter',
            Term_Facet: 'tag filter'
        };
    }

    toString() {
        return this.tokensList[this.type];
    };

    tokenToString(type) {
        return this.tokensList[type];
    };
}

class Lexer {
    constructor() {
        this.tokens = [];
        this.currentPos = 0;
        this.lastToken = null;
    }


    get(i) {
        if (i === undefined) i = 0;
        if (this.currentPos + i >= this.tokens.length) return this.tokens[this.tokens.length - 1];
        return this.tokens[this.currentPos + i];
    };

    next() {
        if (this.currentPos > this.tokens.length) {
            return null;
        }

        this.currentPos++;
    };

    isSeparator(c) {
        return c === ' ' || c === '(' || c === ')' || c === '<' || c === '>' || c === '=' || c === '!' || c === ':' || c === '\'' || c === '"';
    };

    readTokenValue(s, i) {
        let onlyNum = true;
        let nbDot = 0;
        let startPos;

        for (startPos = i; startPos < s.length && (!this.isSeparator(s[startPos])); startPos++) {
            onlyNum = onlyNum && ((s[startPos] >= '0' && s[startPos] <= '9') || (startPos === i && s[startPos] === '-') || (startPos > i && s[startPos] === '.' && (++nbDot) === 1));
        }

        if (startPos - i === 2 && s[i + 0] === 'O' && s[i + 1] === 'R') {
            return new Token('Token_OR', s.substr(i, startPos - i), null, i);
        } else if (startPos - i === 2 && s[i + 0] === 'T' && s[i + 1] === 'O') {
            return new Token('Token_Range', s.substr(i, startPos - i), null, i);
        } else if (startPos - i === 3 && s[i + 0] === 'N' && s[i + 1] === 'O'&& s[i + 2] === 'T') {
            return new Token('Token_NOT', s.substr(i, startPos - i), null, i);
        } else if (startPos - i === 3 && s[i + 0] === 'A' && s[i + 1] === 'N' && s[i + 2] === 'D') {
            return new Token('Token_AND', s.substr(i, startPos - i), null, i);
        } else {
            return new Token(onlyNum ? 'Token_Num' : 'Token_String', s.substr(i, startPos - i), null, i);
        }
    };

    readQuotedString(s, i) {
        const quoteType = s[i];
        let escape = false;
        let startPos;

        for (startPos = i + 1; startPos < s.length; startPos++) {
            if (s[startPos] === quoteType && !escape) {
                if (startPos - i <= 1) { // ""
                    return new Token('Token_Empty_Str', quoteType + quoteType, null, startPos);
                } else {
                    return new Token('Token_String', s.substr(i + 1, startPos - i - 1), s.substr(i, startPos - i + 1), i);
                }
            }

            if (s[startPos] === '\\') {
                escape = !escape;
            }
            else {
                escape = false;
            }
        }

        return new Token('Token_Incomplete_Str', s.substr(i + 1, startPos - i), s.substr(i, startPos - i), i);
    };

    readToken(s, i) {
        if (s[i] === '=') {
            return new Token('Token_Operator', '=', null, i);
        } else if (s[i] === '<') { // < or <=
            if (s.length > i + 1 && s[i + 1] === '=') return new Token('Token_Operator', '<=', null, i);
            return new Token('Token_Open_Angled_Bracket', '<', null, i);
        } else if (s[i] === '>') { // > or >=
            if (s.length > i + 1 && s[i + 1] === '=') return new Token('Token_Operator', '>=', null, i);
            return new Token('Token_Close_Angled_Bracket', '>', null, i);
        } else if (s[i] === '!') { // !=
            if (s.length > i + 1 && s[i + 1] === '=') return new Token('Token_Operator', '!=', null, i);
            return new Token('Token_Error', s[i], null, i);
        } else if (s[i] === '(') {
            return new Token('Token_Open_Backet', '(', null, i);
        } else if (s[i] === ')') {
            return new Token('Token_Close_Bracket', ')', null, i);
        } else if (s[i] === ':') {
            return new Token('Token_Facet_Separator', ':', null, i);
        } else if (s[i] === ',') {
            return new Token('Token_Coma', ',', null, i);
        } else if (s[i] === '"' || s[i] === '\'') {
            return this.readQuotedString(s, i);
        } else {
            return this.readTokenValue(s, i); // STRING, NUM OR or AND
        }
    };

    addToken(token) {
        this.tokens.push(token);
        this.lastToken = token;
    };

    lex(s) {
        let i = 0;
        this.addToken(new Token('First_Token', '', null, 0));

        while (i < s.length && s[i] === ' ') {
            this.lastToken.afterSeparators += s[i];
            i++;
        }

        while (i < s.length) {
            let token = this.readToken(s, i);
            this.addToken(token);

            if (token.type === 'Token_Error') {
                token.afterSeparators = s.substr(i + 1, s.length - i);
                this.currentPos = this.tokens.length - 1;
                return false;
            }
            i += token.raw_value.length;

            while (i < s.length && s[i] === ' ') {
                this.lastToken.afterSeparators += s[i];
                i++;
            }
        }
        this.addToken(new Token('Token_EOF', 'E', null, s.length));

        return true;
    }
}

class Parser {
    parse(s) {
        this.lexer = new Lexer();
        this.termType = 'Term_None';
        this.firstTermToken = null;
        this.tags = [];
        this.numericsFilters = [];
        this.facetFilters = [];
        this.groups = [];
        this.foundAND = false;
        this.foundOR = false;

        let response = {
            html: '',
            errorMessage: '',
        };

        if (s.length === 0) {
            return response;
        }

        if (this.lexer.lex(s) === false) {
            response.errorMessage = "Not allowed " + this.lexer.get(0).toString() + " at col " + this.lexer.get(0).pos;
        }

        this.lexer.next(); // Skip First_Token

        if (this.parseAnd()) {
            if (this.lexer.get().type !== 'Token_EOF') {
                this.unexpectedToken(this.lexer.get(), 'Token_EOF');
            }
        }

        let isValid = true;
        response.tokens = this.lexer.tokens.map(function (token) {
            if (token.errorStart || (!isValid)) {
                isValid = false;
                token.cssClasses.push('unexpected');
            }

            if (token.errorStop) {
                token.cssClasses.push('unexpected');
                isValid = true;
            }

            if (!isValid) token.afterSeparatorsCssClasses.push('unexpected');
            if (token.unexpectedMessage) response.errorMessage = token.unexpectedMessage;

            response.html += `<span class="${token.cssClasses.join(' ')}">${token.raw_value}</span><span class="${token.afterSeparatorsCssClasses.join(' ')}">${token.afterSeparators}</span>`;

            return token;
        });

        return response
    };

    error(token, errorMessage) {
        token.unexpectedMessage = errorMessage;
        token.errorStop = true;
    };

    unexpectedToken(token, expected) {
        let errorMessage = "Unexpected token " + token.toString();

        if (token.value.length > 0 && (token.type === 'Token_String' || token.type === 'Token_Num')) {
            errorMessage += '(' + token.value.replace(/\n/g, '\u21b5') + ')';
        }

        errorMessage += " expected " + token.tokenToString(expected) + " at col " + token.pos;

        this.error(token, errorMessage);
    };

    parseIntermediate(parseAnd) {
        let previousType = this.termType; // Store the previous type for A OR (B OR C)
        if (this.parseTerm()) {
            do {if (this.foundOR && previousType !== 'Term_None' && this.termType !== previousType) { // Different type in a OR
                    this.firstTermToken.errorStart = true;
                    this.error(this.lexer.get(-1), this.getSameOrError(previousType));
                    return false;
                }
                previousType = this.termType;
                if (this.lexer.get().type !== 'Token_OR' && (!parseAnd || this.lexer.get().type !== 'Token_AND')) {
                    break;
                }
                if (this.lexer.get().type === 'Token_AND') {
                    this.foundAND = true;
                } else {
                    this.foundOR = true;
                }
                if (this.foundOR && this.foundAND) {
                    this.error(this.lexer.get(), "filter (X AND Y) OR Z is not allowed, only (X OR Y) AND Z is allowed");
                    return false;
                }
                this.lexer.next();
                if (!this.parseTerm()) { // TERM OR ...
                    return false;
                }

            } while (true);
            return true;
        } else {
            return false;
        }
    }

    parseAnd() {
        this.termType = 'Term_None';
        this.foundOR = false;
        this.foundAND = false;

        if (this.parseIntermediate(false)) {
            do {
                if (this.lexer.get().type !== 'Token_AND') {
                    break;
                }

                this.lexer.next();
                this.termType = 'Term_None';
                this.foundOR = false;
                this.foundAND = false;

                if (!this.parseIntermediate(false)) { // TERM AND ...
                    return false;
                }
            } while (true);
            return true;
        } else {
            return false;
        }
    };

    getSameOrError(expectedType) {
        let errorMessage = 'Different types are not allowed in the same OR.';

        if (expectedType === 'Term_Numeric') {
            errorMessage += '\nExpected a numeric filter which needs to have one of the following form:';
            errorMessage += '\n - numeric_attr_name=10';
            errorMessage += '\n - numeric_attr_name>10';
            errorMessage += '\n - numeric_attr_name>=10';
            errorMessage += '\n - numeric_attr_name<10';
            errorMessage += '\n - numeric_attr_name<=10';
            errorMessage += '\n - numeric_attr_name!=10';
            errorMessage += '\n - numeric_attr_name:10 TO 20';
        } else if (expectedType === 'Term_Facet') {
            errorMessage += '\nExpected a facet filter which needs to have this form:';
            errorMessage += '\n - facet_name:facet_value';
        } else if (expectedType === 'Term_Tag') {
            errorMessage += '\nExpected a tag filter which needs to have this form:';
            errorMessage += '\n - _tags:tag_value';
            errorMessage += '\n - tag_value';
        }

        return errorMessage;
    };

    parseTerm() {

        const score = 1;
        if (this.lexer.get().type === 'Token_Open_Backet') { // ()
            this.lexer.next();
            if (!this.parseIntermediate(true))
                return false;

            if (this.lexer.get().type !== 'Token_Close_Bracket') {
                this.unexpectedToken(this.lexer.get(), 'Token_Close_Bracket');
                return false;
            }

            this.lexer.next();
            return true;
        }
        this.termType = 'Term_None';

        let negative = false;
        if (this.lexer.get().type === 'Token_NOT') {
            this.lexer.next();
            negative = true;
        }
        if (this.lexer.get().type === 'Token_String' || this.lexer.get().type === 'Token_Num') { // TAG or FACET or NUM
            this.firstTermToken = this.lexer.get();
            const attributeNameToken = this.lexer.get();
            this.lexer.next();
            if (this.lexer.get().type === 'Token_Operator' || this.lexer.get().type === 'Token_Open_Angled_Bracket' || this.lexer.get().type === 'Token_Close_Angled_Bracket') { // NUM
                const operatorToken = this.lexer.get();
                if (this.lexer.get().type === 'Token_Open_Angled_Bracket' && this.isOption(this.lexer.get(1))) {
                    // Tag with options
                    if (!this.parseOptions(score))
                        return false;
                    this.tags.push(attributeNameToken.value + '<' + score + '>');
                    return true;
                }
                this.lexer.next();
                if (this.lexer.get().type !== 'Token_Num') {
                    this.unexpectedToken(this.lexer.get(), 'Token_Num');
                    return false;
                }
                const valToken = this.lexer.get();
                this.lexer.next();
                this.termType = 'Term_Numeric';
                if (negative) {
                    this.negateOperator(operatorToken);
                }
                this.numericsFilters.push(attributeNameToken.value + ' ' + operatorToken.value + ' ' + valToken.value);
                return true;
            } else if (this.lexer.get().type === 'Token_Facet_Separator') { // Facet or Range
                this.lexer.next();
                if (this.lexer.get().type !== 'Token_String' && this.lexer.get().type !== 'Token_Num') {
                    this.unexpectedToken(this.lexer.get(), 'Token_String');
                    return false;
                }
                const valToken = this.lexer.get();
                this.lexer.next();
                if (valToken.type === 'Token_Num' && this.lexer.get().type === 'Token_Range') { // Range
                    this.lexer.next(); // TO
                    if (this.lexer.get().type !== 'Token_Num') {
                        this.unexpectedToken(this.lexer.get(), 'Token_Num');
                        return false;
                    }

                    // TODO handle negative
                    this.numericsFilters.push(attributeNameToken.value + ':' + valToken.value + ' TO ' + this.lexer.get().value);
                    this.lexer.next();
                    this.termType = 'Term_Numeric';
                    return true;
                }
                const isTag = attributeNameToken.value === '_tags';
                this.termType = isTag ? 'Term_Tag' : 'Term_Facet';
                if (!this.parseOptions(score))
                    return false;

                if (negative) {
                    if (isTag) {
                        this.tags.push('-' + valToken.value + '<' + score + '>');
                    } else {
                        this.facetFilters.push('-' + attributeNameToken.value + ':' + valToken.value + '<' + score + '>');
                    }
                } else if (valToken.value[0] === '-' || valToken.value[0] === '\\') {
                    if (isTag) {
                        this.tags.push('\\' + valToken.value + '<' + score + '>');
                    } else {
                        this.facetFilters.push('\\' + attributeNameToken.value + ':' + valToken.value + '<' + score + '>');
                    }
                } else {
                    if (isTag) {
                        this.tags.push(valToken.value + '<' + score + '>');
                    } else {
                        this.facetFilters.push(attributeNameToken.value + ':' + valToken.value + '<' + score + '>');
                    }
                }
                return true;
            }
            // Tag without options
            if (negative) {
                this.tags.push('-' + attributeNameToken.value + '<' + score + '>');
            } else if (attributeNameToken.value[0] === '-' || attributeNameToken.value[0] === '\\') {
                this.tags.push('\\' + attributeNameToken.value + '<' + score + '>');
            } else {
                this.tags.push(attributeNameToken.value + '<' + score + '>');
            }
            this.termType = 'Term_Tag';
            return true;
        }
        this.unexpectedToken(this.lexer.get(), 'Token_Term');
        return false;
    };

    parseOptions(score) {
        if (this.lexer.get().type !== 'Token_Open_Angled_Bracket') {
            // The options for a filter are optional
            return true;
        }
        this.lexer.next();
        let hasNext = true;
        do {
            if (!this.parseOption(score)) {
                return false;
            }
            hasNext = false;
            if (this.lexer.get().type === 'Token_Coma') {
                hasNext = true;
            }
        } while (hasNext);
        if (this.lexer.get().type !== 'Token_Close_Angled_Bracket') {
            this.unexpectedToken(this.lexer.get(), 'Token_Close_Angled_Bracket');
        }
        this.lexer.next();
        return true;
    };

    parseOption(score) {
        if (this.lexer.get().type !== 'Token_String') {
            this.unexpectedToken(this.lexer.get(), 'Token_String');
            return false;
        }

        const optionNameToken = this.lexer.get();
        this.lexer.next();
        if (optionNameToken.value === 'score') {
            if (this.lexer.get().type !== 'Token_Operator' || this.lexer.get().value !== '=') {
                this.unexpectedToken(this.lexer.get(), "\\\"=\\\"");
                return false;
            }
            this.lexer.next();
            if (this.lexer.get().type !== 'Token_Num') {
                this.unexpectedToken(this.lexer.get(), 'Token_Num');
                return false;
            }
            score = this.lexer.get().value;
            this.lexer.next();
            return score;
        } else {
            this.unexpectedToken(optionNameToken, "\\\"score\\\"");
            return false;
        }
    };

    negateOperator(operatorToken) {

    };

    isOption(token) {
        return token.value === 'score';
    };
}

export default Parser;
